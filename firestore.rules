rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserOwned(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User profile collection
    match /users/{userId} {
      // Allow creation if authenticated and data contains required fields
      allow create: if isAuthenticated() 
        && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['email', 'uid'])
        && request.resource.data.uid == userId;

      // Allow reading own profile
      allow read: if isUserOwned(userId);

      // Allow update own profile with required fields preserved
      allow update: if isUserOwned(userId)
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['role', 'roleSelectedAt', 'lastUpdated', 'username'])
        && request.resource.data.uid == userId
        && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email']) 
            || request.resource.data.email == resource.data.email);

      // Prevent deletion
      allow delete: if false;
    }

    // Campaigns collection
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.creatorId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'budget', 'timeline', 'status']);
      allow update: if isAuthenticated() 
        && (resource.data.creatorId == request.auth.uid 
            || resource.data.brandId == request.auth.uid);
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.keys().hasAll(['paymentId', 'name', 'invoice', 'amount', 'currency', 'status'])
        && request.resource.data.amount is number
        && request.resource.data.status in ['Completed', 'Pending', 'Failed'];
      allow update: if isAuthenticated()
        && request.resource.data.uid == request.auth.uid;
      allow delete: if false;
    }

    // Payment history collection
    match /paymentHistory/{historyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.uid == request.auth.uid;
      allow delete: if false;
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() 
        && (resource.data.senderId == request.auth.uid 
            || resource.data.recipientId == request.auth.uid);
      allow create: if isAuthenticated()
        && request.resource.data.senderId == request.auth.uid
        && request.resource.data.keys().hasAll(['senderId', 'recipientId', 'content', 'timestamp']);
      allow update: if false;
      allow delete: if false;
    }

    // Offers collection
    match /offers/{offerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated()
        && request.resource.data.brandId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'description', 'budget', 'requirements']);
      allow update: if isAuthenticated() 
        && (resource.data.brandId == request.auth.uid 
            || resource.data.influencerId == request.auth.uid);
      allow delete: if isAuthenticated() && resource.data.brandId == request.auth.uid;
    }

    // User settings collection
    match /userSettings/{userId} {
      allow read: if isUserOwned(userId);
      allow write: if isUserOwned(userId);
    }
  }
}
